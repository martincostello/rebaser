{
  "version": 3,
  "sources": ["../lib/NuGetVersion.js"],
  "sourcesContent": ["\"use strict\";\n// Copyright (c) Martin Costello, 2023. All rights reserved.\n// Licensed under the Apache 2.0 license. See the LICENSE file in the project root for full license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NuGetVersion = void 0;\nconst prereleaseMarker = '-';\nconst versionMarker = '.';\nclass NuGetVersion {\n    constructor(major = -1, minor = -1, patch = -1, build = -1, prerelease = '') {\n        this.major = major;\n        this.minor = minor;\n        this.patch = patch;\n        this.build = build;\n        this.prerelease = prerelease;\n    }\n    static tryParse(value) {\n        if (!value) {\n            return null;\n        }\n        let prerelease = '';\n        let chunks = value.split(prereleaseMarker);\n        if (chunks.length > 1) {\n            prerelease = chunks.slice(1).join(prereleaseMarker);\n        }\n        const isValid = (s) => {\n            const part = parseInt(s, 10);\n            return isNaN(part) || part < 0 ? -1 : part;\n        };\n        chunks = chunks[0].split(versionMarker);\n        if (chunks.length < 1) {\n            return null;\n        }\n        const major = isValid(chunks[0]);\n        if (major < 0) {\n            return null;\n        }\n        let minor = -1;\n        let patch = -1;\n        let build = -1;\n        if (chunks.length > 1) {\n            minor = isValid(chunks[1]);\n            if (minor < 0) {\n                return null;\n            }\n        }\n        if (chunks.length > 2) {\n            patch = isValid(chunks[2]);\n            if (patch < 0) {\n                return null;\n            }\n        }\n        if (chunks.length > 3) {\n            build = isValid(chunks[3]);\n            if (build < 0) {\n                return null;\n            }\n        }\n        return new NuGetVersion(major, minor, patch, build, prerelease);\n    }\n    compareTo(other) {\n        if (this.major !== other.major) {\n            return this.major > other.major ? 1 : -1;\n        }\n        else if (this.minor !== other.minor) {\n            return this.minor > other.minor ? 1 : -1;\n        }\n        else if (this.patch !== other.patch) {\n            return this.patch > other.patch ? 1 : -1;\n        }\n        else if (this.build !== other.build) {\n            return this.build > other.build ? 1 : -1;\n        }\n        else if (this.prerelease && other.prerelease) {\n            return this.prerelease.localeCompare(other.prerelease);\n        }\n        return this.prerelease ? -1 : other.prerelease ? 1 : 0;\n    }\n    toString() {\n        const parts = [this.major, this.minor, this.patch, this.build];\n        const version = parts.filter((p) => p > -1).join(versionMarker);\n        return this.prerelease ? `${version}-${this.prerelease}` : version;\n    }\n}\nexports.NuGetVersion = NuGetVersion;\n"],
  "mappings": "aAGA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,EAAK,CAAC,EAC5D,QAAQ,aAAe,OACvB,IAAMA,EAAmB,IACnBC,EAAgB,IAChBC,EAAN,MAAMC,CAAa,CACf,YAAYC,EAAQ,GAAIC,EAAQ,GAAIC,EAAQ,GAAIC,EAAQ,GAAIC,EAAa,GAAI,CACzE,KAAK,MAAQJ,EACb,KAAK,MAAQC,EACb,KAAK,MAAQC,EACb,KAAK,MAAQC,EACb,KAAK,WAAaC,CACtB,CACA,OAAO,SAASC,EAAO,CACnB,GAAI,CAACA,EACD,OAAO,KAEX,IAAID,EAAa,GACbE,EAASD,EAAM,MAAMT,CAAgB,EACrCU,EAAO,OAAS,IAChBF,EAAaE,EAAO,MAAM,CAAC,EAAE,KAAKV,CAAgB,GAEtD,IAAMW,EAAWC,GAAM,CACnB,IAAMC,EAAO,SAASD,EAAG,EAAE,EAC3B,OAAO,MAAMC,CAAI,GAAKA,EAAO,EAAI,GAAKA,CAC1C,EAEA,GADAH,EAASA,EAAO,CAAC,EAAE,MAAMT,CAAa,EAClCS,EAAO,OAAS,EAChB,OAAO,KAEX,IAAMN,EAAQO,EAAQD,EAAO,CAAC,CAAC,EAC/B,GAAIN,EAAQ,EACR,OAAO,KAEX,IAAIC,EAAQ,GACRC,EAAQ,GACRC,EAAQ,GAaZ,OAZIG,EAAO,OAAS,IAChBL,EAAQM,EAAQD,EAAO,CAAC,CAAC,EACrBL,EAAQ,IAIZK,EAAO,OAAS,IAChBJ,EAAQK,EAAQD,EAAO,CAAC,CAAC,EACrBJ,EAAQ,IAIZI,EAAO,OAAS,IAChBH,EAAQI,EAAQD,EAAO,CAAC,CAAC,EACrBH,EAAQ,GACD,KAGR,IAAIJ,EAAaC,EAAOC,EAAOC,EAAOC,EAAOC,CAAU,CAClE,CACA,UAAUM,EAAO,CACb,OAAI,KAAK,QAAUA,EAAM,MACd,KAAK,MAAQA,EAAM,MAAQ,EAAI,GAEjC,KAAK,QAAUA,EAAM,MACnB,KAAK,MAAQA,EAAM,MAAQ,EAAI,GAEjC,KAAK,QAAUA,EAAM,MACnB,KAAK,MAAQA,EAAM,MAAQ,EAAI,GAEjC,KAAK,QAAUA,EAAM,MACnB,KAAK,MAAQA,EAAM,MAAQ,EAAI,GAEjC,KAAK,YAAcA,EAAM,WACvB,KAAK,WAAW,cAAcA,EAAM,UAAU,EAElD,KAAK,WAAa,GAAKA,EAAM,WAAa,EAAI,CACzD,CACA,UAAW,CAEP,IAAMC,EADQ,CAAC,KAAK,MAAO,KAAK,MAAO,KAAK,MAAO,KAAK,KAAK,EACvC,OAAQC,GAAMA,EAAI,EAAE,EAAE,KAAKf,CAAa,EAC9D,OAAO,KAAK,WAAa,GAAGc,CAAO,IAAI,KAAK,UAAU,GAAKA,CAC/D,CACJ,EACA,QAAQ,aAAeb",
  "names": ["prereleaseMarker", "versionMarker", "NuGetVersion", "_NuGetVersion", "major", "minor", "patch", "build", "prerelease", "value", "chunks", "isValid", "s", "part", "other", "version", "p"]
}
